@model BeyondTheTutor.Models.TutoringAppt

@{ ViewBag.Status = "Requested";
    ViewBag.Type = "In-Person"; }

<body class="wou-silver-bg">
    <div class="ui one column stackable page grid">
        <div class="ui one column stackable page grid">
            <div class="ui yellow message schedule">
                <i class="close icon"></i>Select a date and time range for your tutoring session.
                Then select the estimated length for your session.<br />
                Start Date & Time and End Date & Time indicates you are available at any time within that range.
            </div>
        </div>
        <div class="ui form attached fluid segment">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.Hidden("Status", (object)ViewBag.Status)
                @Html.Hidden("TypeOfMeeting", (object)ViewBag.Type)
                @Html.Hidden("StudentID", (object)ViewBag.CurrentStudentID)
                <div class="ui attached message schedule">
                    <div class="header">
                        Welcome to session requests!
                    </div>
                    <p>Fill out the form below to request a tutoring session.</p>
                </div>
                <form>
                    <div class="four fields">
                        <div class="field">
                            <h4>Start Date &amp; Time</h4>
                            @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @type = "datetime-local", @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
                        </div>
                        <div class="field">
                            <h4>End Date &amp; Time</h4>
                            @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @type = "datetime-local", @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
                        </div>
                        <div class="field">
                            <h4>Session Length</h4>
                            <div class="field">
                                <select class="ui simple dropdown item" id="Length" name="Length">
                                    <option type="text" value="15 minutes">15 minutes</option>
                                    <option type="text" value="30 minutes">30 minutes</option>
                                    <option type="text" value="45 minutes">45 minutes</option>
                                    <option type="text" value="1 hour">1 hour</option>
                                    <option type="text" value="2 hours">2 hours</option>
                                </select>
                            </div>
                            @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                        </div>
                        <div class="field">
                            <h4>Class</h4>
                            @Html.DropDownList("ClassID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ClassID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <button class="fluid ui button schedule">Submit Request</button>
                </form>
            }
        </div>
    </div>
</body>

@section scripts
{
    <script src="~/Scripts/main.js"></script>
}

